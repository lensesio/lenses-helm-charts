{{/* Deliberately fail helm deployment if these values are set */}}
{{- $outer := . -}}
{{- range tuple "zookeepers" "license" "licenseUrl" "schemaRegistries" "connectClusters" "kafka" }}
  {{- if hasKey $outer.Values.lenses . }}
    {{ fail (printf "%s%s%s" "Setting configuration value .Values.lenses." . " is deprecated. Please use the provision yaml instead. See documentation here.") }}
  {{ end }}
{{ end }}
{{- if and .Values.lenses.provision.enabled .Values.lenses.tls.enabled .Values.lenses.tls.clientAuth}}
  {{ fail "Provisioning not supported if TLS client authentication (mTLS) is enabled" }}
{{ end -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{include "fullname" . | quote}}
  labels:
    app: {{include "fullname" . | quote}}
    chart: {{printf "%s-%s" .Chart.Name .Chart.Version}}
    release: {{.Release.Name}}
    heritage: {{.Release.Service}}
    component: "lenses"
    lenses.io/app: {{include "fullname" .}}
    lenses.io/app.type: lenses
    {{- range $key, $value := .Values.labels }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  {{- if .Values.annotations }}
  annotations:
    {{- range $key, $value := .Values.annotations }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  {{- end }}
spec:
  # Horizontal scaling is not yet supported
  replicas: 1
  selector:
    matchLabels:
      app: {{include "fullname" . | quote}}
  strategy:
    type: {{ default "Recreate" .Values.strategy.type | quote }}
  template:
    metadata:
      labels:
        app: {{include "fullname" . | quote}}
        component: "lenses"
        hostPort: {{ .Values.restPort | quote }}
        containerPort: {{ .Values.restPort | quote }}
        {{- range $key, $value := .Values.labels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      annotations:
        {{- with .Values.monitoring }}
        {{- if .enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .port }}"
        prometheus.io/path: "/metrics"
        {{- end }}
        {{- end }}
        {{- range $key, $value := .Values.podTemplateAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- if  (include "lensesAppendConf" .) }}
        checksum/lenses.append.conf: {{ include "lensesAppendConf" . | sha256sum }}
        {{- end }}
    spec:
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
      {{- if .Values.securityContext }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      {{- end }}
      {{- if .Values.dnsPolicy }}
      dnsPolicy: {{ .Values.dnsPolicy }}
      {{- end }}
      {{- if .Values.dnsConfig }}
      dnsConfig:
        {{- toYaml .Values.dnsConfig | nindent 8 }}
      {{- end }}
      volumes:
        {{- if .Values.lenses.provision.enabled }}
        - name: provision-secrets
          secret:
            secretName: {{include "provisionFullname" . | quote}}

        {{- if eq .Values.lenses.provision.version "2" }}
        - name: provision-secrets-files
          secret:
            secretName: {{ (printf "%s-%s" (include "provisionFullname" .) "files") | quote}}
        {{- end }}

        {{- end }}

       {{- if and (hasKey .Values "containerSecurityContext") (hasKey .Values.containerSecurityContext "readOnlyRootFilesystem") (eq .Values.containerSecurityContext.readOnlyRootFilesystem true) }}
        - name: tmp-volume
          emptyDir: {}
        - name: data-volume
          emptyDir: {}
        {{- end }}
        - name: secrets
          secret:
            secretName: {{include "fullname" . | quote}}
            items:
              - key: security.conf
                path: security.conf
              - key: security.append.conf
                path: security.append.conf
              {{/* TODO: lenses.keytab is deprecated */}}
              - key: lenses.keytab
                path: lenses.keytab
              {{/* TODO: lenses.opts.keystore.jks is deprecated */}}
              - key: lenses.opts.keystore.jks
                path: lenses.opts.keystore.jks
              - key: lenses.opts.truststore.jks
                path: lenses.opts.truststore.jks
              {{- if .Values.lenses.tls.enabled }}
              - key: lenses.tls.keystore.jks
                path: lenses.tls.keystore.jks
              - key: lenses.tls.truststore.jks
                path: lenses.tls.truststore.jks
              {{- end }}
              # SAML Secrets
              {{- if .Values.lenses.security.saml.enabled }}
              - key: saml.keystore.jks
                path: saml.keystore.jks
              - key: saml.idp.xml
                path: saml.idp.xml
              {{- end }}
        - name: config
          configMap:
            name: {{include "fullname" . | quote}}
        {{- if .Values.persistence.enabled }}
        - name: storage
          persistentVolumeClaim:
            claimName: {{ default (include "claimName" .) .Values.persistence.existingClaim }}
        - name: logs
          persistentVolumeClaim:
            claimName: {{ default (include "logsClaimName" .) .Values.persistence.existingClaim }}
        {{- end }}
        {{- if .Values.additionalVolumes }}
          {{- toYaml .Values.additionalVolumes | nindent 8 }}
        {{- end }}
      serviceAccountName: {{ .Values.serviceAccount }}
      {{- if .Values.image.imagePullSecrets }}
      imagePullSecrets: {{ .Values.image.imagePullSecrets | toYaml | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{include "lensesImage" . | quote }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if .Values.containerSecurityContext}}
        securityContext:
          {{- toYaml .Values.containerSecurityContext | nindent 10 }}
        {{- end }}
        ports:
        - containerPort: {{ .Values.restPort }}
        {{- if .Values.lenses.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /
            port: {{ .Values.restPort }}
          {{- if .Values.lenses.tls.enabled }}
            scheme: HTTPS
          {{- end }}
          initialDelaySeconds: 300
          periodSeconds: 10
        {{- end }}

        volumeMounts:
          - name: secrets
            mountPath: "/mnt/secrets"
          {{/* TODO: this is deprecated */}}
          - name: secrets
            mountPath: "/etc/keytab"
            subPath: "keytab"
          {{/* TODO: this is deprecated */}}
          - name: secrets
            mountPath: "/etc/registry.keytab"
            subPath: "registry.keytab"
          - name: secrets
            mountPath: "/mnt/settings/security.append.conf"
            subPath: "security.append.conf"
          - name: config
            mountPath: "/mnt/settings/lenses.append.conf"
            subPath: "lenses.append.conf"
          {{- if .Values.persistence.enabled }}
          - name: storage
            mountPath: "/data/storage"
          - name: logs
            mountPath: "/data/log"
          {{- end }}
          {{- if .Values.additionalVolumeMounts }}
            {{- toYaml .Values.additionalVolumeMounts | nindent 10 }}
          {{- end }}
        {{- if and .Values.lenses.provision.enabled (eq .Values.lenses.provision.version "2") }}
          - name: provision-secrets
            mountPath: {{ $.Values.lenses.provision.path }}
          - name: provision-secrets-files
            mountPath: {{ $.Values.lenses.provision.path }}/files
        {{- end }}
        {{- if and (hasKey .Values "containerSecurityContext") (hasKey .Values.containerSecurityContext "readOnlyRootFilesystem") (eq .Values.containerSecurityContext.readOnlyRootFilesystem true) }}
          - name: tmp-volume
            mountPath: /tmp
          - name: data-volume
            mountPath: /data
        {{- end }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        env:
        {{- with .Values.lenses.security.defaultUser.usernameSecretKeyRef }}
        - name: LENSES_SECURITY_USER
          valueFrom:
            secretKeyRef:
              name: {{ .name }}
              key: {{ .key }}
        {{- end }}
        {{- with .Values.lenses.security.defaultUser.passwordSecretKeyRef }}
        - name: LENSES_SECURITY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .name }}
              key: {{ .key }}
        {{- end }}
        {{- if .Values.lenses.tls.enabled }}
        {{- if .Values.lenses.tls.keyStoreFileData }}
        - name: LENSES_SSL_KEYSTORE_LOCATION
          value: "/mnt/secrets/lenses.tls.keystore.jks"
        {{- end }}
        {{- if .Values.lenses.tls.keyStorePassword }}
        - name: LENSES_SSL_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{include "fullname" . | quote}}
              key:  "lenses.tls.keystore.password"
        {{- end }}
        {{- if .Values.lenses.tls.keyPassword }}
        - name: LENSES_SSL_KEY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{include "fullname" . | quote}}
              key:  "lenses.tls.key.password"
        {{- end }}
        {{- if .Values.lenses.tls.auth }}
        - name: LENSES_SSL_CLIENT_AUTH
          value: {{ .Values.lenses.tls.auth }}
        {{- end }}
        {{- if .Values.lenses.tls.trustStoreFileData }}
        - name: LENSES_SSL_TRUSTSTORE_LOCATION
          value: "/mnt/secrets/lenses.tls.truststore.jks"
        {{- end }}
        {{- if .Values.lenses.tls.trustStorePassword }}
        - name: LENSES_SSL_TRUSTSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{include "fullname" . | quote}}
              key:  "lenses.tls.truststore.password"
        {{- end }}
        {{- end }}
        - name: LENSES_OPTS
          value: {{include "lensesOpts" . | default "" | quote}}
        {{/* TODO .Values.lenses.opts.keyStoreFileData is deprecated */}}
        {{- if .Values.lenses.opts.keyStoreFileData }}
        - name: CLIENT_OPTS_KEYSTORE_FILE
          value: "/mnt/secrets/lenses.opts.keystore.jks"
        {{- end }}
        {{/* TODO .Values.lenses.opts.keyStorePassword is deprecated */}}
        {{- if .Values.lenses.opts.keyStorePassword }}
        - name: CLIENT_OPTS_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{include "fullname" . | quote}}
              key:  "lenses.opts.keystore.password"
        {{- end }}
        {{- if .Values.lenses.opts.trustStoreFileData }}
        - name: CLIENT_OPTS_TRUSTSTORE_FILE
          value: "/mnt/secrets/lenses.opts.truststore.jks"
        {{- end }}
        {{- if .Values.lenses.opts.trustStorePassword }}
        - name: CLIENT_OPTS_TRUSTSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{include "fullname" . | quote}}
              key:  "lenses.opts.truststore.password"
        {{- end }}
        {{- if.Values.lenses.jvm.heapOpts}}
        - name: LENSES_HEAP_OPTS
          value: {{ .Values.lenses.jvm.heapOpts | quote }}
        {{- end }}
        - name: LENSES_LOG4J_OPTS
          value: {{include "lensesLogBackOpts" . | default "" | quote}}
        {{- if.Values.lenses.jvm.performanceOpts}}
        - name: LENSES_PERFORMANCE_OPTS
          value: {{ .Values.lenses.jvm.performanceOpts | quote }}
        {{- end }}
        - name: LENSES_PORT
          value: {{ .Values.restPort | quote }}
        - name: LENSES_JMX_PORT
          value: "9101"
        {{- if .Values.lenses.grafanaUrl }}
        - name: LENSES_GRAFANA
          value: {{ .Values.lenses.grafanaUrl | quote }}
        {{- end }}
        {{- if and .Values.lenses.provision.enabled (eq .Values.lenses.provision.version "2") }}
        # Provisioning
        - name: LENSES_PROVISIONING_PATH
          value: {{ .Values.lenses.provision.path }}
        {{- if .Values.lenses.provision.interval }}
        - name: LENSES_PROVISIONING_INTERVAL
          value: {{ .Values.lenses.provision.interval }}
        {{- end }}
        {{- if .Values.monitoring.port }}
        - name: PROMETHEUS_METRICS_PORT
          value: {{ .Values.monitoring.port | quote }}
        {{- end }}
        {{- end }}

        # lenses topics
        - name: LENSES_TOPICS_EXTERNAL_TOPOLOGY
          value: {{include "topologyTopic" . | quote}}
        - name: LENSES_TOPICS_EXTERNAL_METRICS
          value: {{include "externalMetricsTopic" . | quote}}
        - name: LENSES_TOPICS_METRICS
          value: {{include "metricTopic" . | quote}}

        # Kubernetes Processors
        - name: LENSES_SQL_EXECUTION_MODE
          value: {{ .Values.lenses.sql.mode | quote }}

        # user secrets
        - name: LENSES_SECRET_FILE
          value: "/mnt/secrets/security.conf"

        # Kubernetes processors
        {{- if eq .Values.lenses.sql.mode "KUBERNETES"}}
        - name: LENSES_KUBERNETES_PROCESSOR_IMAGE_NAME
          value: {{ .Values.lenses.sql.processorImage | quote }}
        - name: LENSES_KUBERNETES_PROCESSOR_IMAGE_TAG
          value: {{ .Values.lenses.sql.processorImageTag | quote }}
        - name: LENSES_KUBERNETES_POD_HEAP
          value: {{ .Values.lenses.sql.heap | quote }}
        - name: LENSES_KUBERNETES_POD_MIN_HEAP
          value: {{ .Values.lenses.sql.minHeap | quote }}
        - name: LENSES_KUBERNETES_POD_MEM_LIMIT
          value: {{ .Values.lenses.sql.memLimit | quote }}
        - name: LENSES_KUBERNETES_POD_MEM_REQUEST
          value: {{ .Values.lenses.sql.memRequest | quote }}
        - name: LENSES_KUBERNETES_POD_LIVENESS_INITIAL_DELAY
          value: {{ .Values.lenses.sql.livenessInitialDelay | quote }}
        {{- end }}

        # Deployments
        {{- if.Values.lenses.deployments.eventsBufferSize }}
        - name: LENSES_DEPLOYMENTS_EVENTS_BUFFER_SIZE
          value: {{ .Values.lenses.deployments.eventsBufferSize | quote }}
        {{- end }}
        {{- if.Values.lenses.deployments.errorsBufferSize }}
        - name: LENSES_DEPLOYMENTS_ERRORS_BUFFER_SIZE
          value: {{ .Values.lenses.deployments.errorsBufferSize | quote }}
        {{- end }}
        {{- if.Values.lenses.deployments.connect.statusInterval }}
        - name: LENSES_DEPLOYMENT_CONNECT_STATUS_INTERVAL
          value: {{ .Values.lenses.deployments.connect.statusInterval | quote }}
        {{- end }}
        {{- if.Values.lenses.deployments.connect.actionsBufferSize }}
        - name: LENSES_DEPLOYMENT_CONNECT_ACTIONS_BUFFER_SIZE
          value: {{ .Values.lenses.deployments.connect.actionsBufferSize | quote }}
        {{- end }}

        # Lenses configuration flags
        - name: LC_KUBERNETES_MODE
          value: "true"

        # Lenses telemetry flags
        - name: LT_PACKAGE
          value: "helm"

        - name: LT_PACKAGE_VERSION
          value: "{{ .Chart.Version }}"

        {{- if .Values.lenses.pauseExec.enabled }}
        - name: PAUSE_EXEC
          value: "true"
        {{- end }}

        {{- range $key, $value := .Values.lenses.env }}
        - name: {{ $key | quote }}
          value: {{ $value | quote }}
        {{- end }}

        {{- range $key, $value := .Values.lenses.configOverrides }}
        - name: {{ printf "%s" $key | replace "." "_" | upper | quote }}
          value: {{ $value | quote }}
        {{- end }}

        # Additional env variables
        {{- if .Values.lenses.additionalEnv }}
        {{- toYaml .Values.lenses.additionalEnv | nindent 8 }}
        {{- end }}

      {{- if and .Values.lenses.provision.enabled (eq .Values.lenses.provision.version "1") }}
        # Lenses sidecar provision is only needed if we are running the pre 5.3.0 provisioning mechanism.
      {{- $provision := .Values.lenses.provision}}
      - name: {{default "lenses-provision" $provision.name}}
        image: {{include "sidecarProvisionImage" . | quote }}
        imagePullPolicy: {{default "Always" $provision.sidecar.image.pullPolicy}}
        {{- if .Values.containerSecurityContext}}
        securityContext:
          {{- toYaml .Values.containerSecurityContext | nindent 10 }}
        {{- end }}
        command:
          - bash
          - -c
          - |
            lenses-cli provision \
              --wait-for-lenses \
              --setup-mode \
              --host="http{{- if .Values.lenses.tls.enabled -}}s{{- end -}}://localhost:{{.Values.restPort}}" \
              {{- if .Values.lenses.tls.enabled}}
              --insecure \
              {{- end}}
              --user="$LENSES_ADMIN_USER" \
              --pass="$LENSES_ADMIN_PASSWORD" \
              /mnt/provision-secrets/provision.yaml \
              --mode=sidecar

        env:
          - name: LENSES_ADMIN_USER
            valueFrom:
              secretKeyRef:
        {{- with .Values.lenses.security.defaultUser.usernameSecretKeyRef }}
                name: {{ .name }}
                key: {{ .key }}
        {{ else }}
                name: {{include "provisionFullname" . | quote}}
                key:  "LENSES_ADMIN_USER"
        {{- end }}
          - name: LENSES_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
        {{- with .Values.lenses.security.defaultUser.passwordSecretKeyRef }}
                name: {{ .name }}
                key: {{ .key }}
        {{ else }}
                name: {{include "provisionFullname" . | quote}}
                key:  "LENSES_ADMIN_PASSWORD"
        {{- end }}
        volumeMounts:
          - name: provision-secrets
            mountPath: "/mnt/provision-secrets"
          {{- if $provision.sidecar.additionalVolumeMounts }}
            {{- toYaml $provision.sidecar.additionalVolumeMounts | nindent 10 }}
          {{- end }}
      {{- end }}

      {{- if .Values.sidecarContainers }}
      {{- toYaml .Values.sidecarContainers | nindent 6 }}
      {{- end }}

      {{- if .Values.initContainers }}
      initContainers:
      {{- toYaml .Values.initContainers | nindent 6 }}
      {{- end }}
