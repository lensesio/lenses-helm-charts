### https://docs.lenses.io/current/installation/kubernetes/helm/ ###

nameOverride: ""
fullnameOverride: ""

image:
  repository: lensesio/lenses
  pullPolicy: IfNotPresent
  # Default to .Chart.AppVersion
  # tag:

annotations: {}
labels: {}
strategy: {}
nodeSelector: {}
tolerations: {}
affinity: {}
securityContext: {}

# Add Prometheus annotations to the pod for Lenses metric scraping
monitoring:
  enabled: true
  # A label to attach to the pods for include in JMX
  pipeline: lenses
  port: 9102
  path: "/metrics"

# Resource management
resources:
  requests:
  #   cpu: 1
    memory: 4Gi
  limits:
  #   cpu: 2
    memory: 5Gi

# rbacEnable indicates if a the cluster has rbac enabled and a cluster role
# and rolebinding should be created for the service account
rbacEnable: true

# Lenses container port
restPort: 3030
# Lenses service port, service targets restPort
servicePort: 80
servicePortName: lenses

# serviceAccount is the Service account to be used by Lenses to deploy apps
serviceAccount: default

# If you use Data Policies module enable a Persistent Volume to keep your data policies rule.
# Also used when lenses.storage.enabled: false, and an H2 local filesystem database is used, instead of Postgresql.
# https://docs.lenses.io/current/installation/kubernetes/persistence/
persistence:
  enabled: true
  accessModes:
    - ReadWriteOnce
  size: 5Gi
  # Target an pre-existing volume claim to use it as Lenses Persistent volume
  # existingClaim:

  ## Policies data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"

# Additional volume mounts to use in Lenses delpoyments, for example to load additional plugins (UDFs) in Lenses
# Use it in conjuction with lenses.additionalVolumes
additionalVolumeMounts:
  # - name: lenses-plugins
  #   mountPath: "/data/plugins"

# Additional volumes to use in Lenses delpoyments either by Lenses for other sidecars like Lenses provisioner.
# Example usages:
#   Lenses: load additional plugins (UDFs) in Lenses
#   Lenses provisioner: load additional files from pre-existing volumes, secrets or vault secrets to use in provisioning
additionalVolumes:
  # - name: secrets
  #   secret:
  #     secretName: lenses-super-secrets
  # Note: PersistentVolumeClaim should already exist before deploying Helm chart
  # - name: lenses-plugins
  #   persistentVolumeClaim:
  #     claimName: lenses-plugins

# Lenses service
service:
  enabled: true
  type: ClusterIP
  annotations: {}

  # If you want to make it available as a node port, then add nodePort: <somePort>
  # Warning: this should not be used with servicePort:
  # Warning nodePort is deprecated and will be removed on next Lenses major version upgrade
  # nodePort:

  externalTrafficPolicy:

  ## Load balancer IP address
  ## Is not required, but allows for static address with
  ## serviceType LoadBalancer.
  ## If not supported by cloud provider, this field is ignored.
  ## Default: nil
  ##
  # loadBalancerIP: 130.211.x.x

  ## This will restrict traffic through the cloud-provider load-balancer
  ## to the specified client IPs.
  ## If not supported by cloud provider, this field is ignored.
  ## Default: nil
  ##
  # loadBalancerSourceRanges:
  #   - 0.0.0.0/0

ingress:
  ## If true, Ingress will be created
  ##
  enabled: false
  host:
  # ingressClassName:

  # Ingress annotations
  annotations: {}
    # Optionally add here the annotations related to the ingress provider, see examples below:
    # kubernetes.io/ingress.class: traefik
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: 'true'
    # nginx.ingress.kubernetes.io/rewrite-target: /

  # TLS if enabled load the tls.crt and tls.keys as a secrets and enable TLS on the ingress
  tls:
    enabled: false
    crt: |-

    key: |-

lenses:
  # Set the details to provision Lenses using lenses-cli
  provision:
    enabled: false

    # Find more details in https://docs.lenses.io/current/installation/kubernetes/helm/#helm-provision
    # About provision.yaml structure: https://docs.lenses.io/current/tools/cli/provision/provision-yaml/
    # GitOps limitations, using lenses.provision https://docs.lenses.io/current/tools/cli/provision/gitops-limitations/
    yaml:

    # Find more details in https://docs.lenses.io/current/installation/kubernetes/helm/#helm-provision-secrets
    secrets: {}
      # Base64 encoded. Read how to convert from .pem to .jks in the article: https://docs.lenses.io/current/configuration/dynamic/pem-to-jks-conversion/
      # data:
      #   kafka.keystore.jks: |-
      #   kafka.truststore.jks: |-
      # stringData:

    # Find more details in https://docs.lenses.io/current/installation/kubernetes/helm/#helm-provision-sidecar
    sidecar:
      # name:
      image:
        repository: lensesio/lenses-cli
        # Default to .Chart.AppVersion with major.minor semantic (e.g 5.0)
        # tag:
        # pullPolicy: Always
        # registrySecretKey:

      # Additional volume mounts to load additional files from pre-existing volumes, secrets or vault secrets to use in provisioning
      # Use it in conjuction with lenses.additionalVolumes
      additionalVolumeMounts:
        # - name: lenses-super-secrets
        #   mountPath: "/data/lenses-super-secrets"


  # For additional generic JVM settings
  # Read more: https://docs.lenses.io/current/configuration/static/jvm/
  lensesOpts: |-

  # Each version of the helm chart for Lenses is accompanied by a values.yaml.
  # This values file contains sane defaults for all the supported Lenses configuration options for that version of the chart.
  # Although great care has been taken to cover most use cases in the chart, we may encounter situations where a specific configuration option is required but is not available.
  # To support such cases, Lenses Helm Chart provides the lenses.append.conf mechanism.
  append:
    # Custom configuration values, will take precedence over the env variables and auto-generated values
    # Read more: https://help.lenses.io/knowledge-base/helm/helm-lenses-append-conf/
    conf: |-

  jvm:
    # heapOpts are any overrides for Lenses Heap JVM options
    heapOpts: |-

    # logBackOpts are any logging options
    logBackOpts:

    #performanceOpts are any jvm tuning options to add to the jvm
    performanceOpts:

    # DEPRECATED in favor of Values.lenses.opts.trustStoreFileData, please use the latter
    # trustStoreFileData:
    # DEPRECATED in favor of Values.lenses.opts.trustStorePassword, please use the latter
    # trustStorePassword:

  # Override the default logback xml
  # Used primarily to load a Lenses provided xml with debug level set for Lenses libs
  # Can be used to load your custom logback if needed
  # logbackXml: /opt/lenses/logback-debug.xml

  # TODO: Replace with docker implementation
  # Global truststore/keystore for the JVM
  opts:
    # base64 encoded truststore data
    # openssl base64 < kafka.truststore.jks | tr -d '\n'
    trustStoreFileData: |-

    trustStorePassword: |-

    # base64 encoded truststore data
    # openssl base64 < kafka.truststore.jks | tr -d '\n'
    keyStoreFileData: |-

    keyStorePassword: |-

  tls:
    # TLS setup for serving Lenses over TLS
    enabled: false

    # base64 encoded truststore data
    # openssl base64 < kafka.truststore.jks | tr -d '\n'
    keyStoreFileData: |-

    keyStorePassword: |-

    keyPassword: |-

    # Authenticate to Lenses with client authentication
    clientAuth: false

    # base64 encoded truststore data
    # openssl base64 < kafka.truststore.jks | tr -d '\n'
    trustStoreFileData: |-

    trustStorePassword: |-


  # Find more details in https://docs.lenses.io/current/installation/kubernetes/helm/#helm-storage
  storage:
    postgres:
      enabled: false
      host:
      port:               # optional, defaults to 5432

      # Set the username for postgres connection
      # Use the value "external" to bypass the Helm validation and handle the username externally.
      # The common use case for using "external" is to take the actual value from a Kubernetes Secret resource already deployed.
      # To do so, add the following definition under 'lenses.additionalEnv' key:
      # - name: LENSES_STORAGE_POSTGRES_USERNAME
      #   valueFrom:
      #     secretKeyRef:
      #       name: [SECRET_RESOURCE_NAME]
      #       key: [SECRET_RESOURCE_KEY]
      username:           # use "external" to manage it using secrets

      # Set the password for postgres connection
      # Use the value "external" to bypass the Helm validation and handle the password externally.
      # The common use case for using "external" is to take the actual value from a Kubernetes Secret resource already deployed.
      # To do so, add the following definition under 'lenses.additionalEnv' key:
      # - name: LENSES_STORAGE_POSTGRES_PASSWORD
      #   valueFrom:
      #     secretKeyRef:
      #       name: [SECRET_RESOURCE_NAME]
      #       key: [SECRET_RESOURCE_KEY]
      password:           # use "external" to manage it using secrets

      database:
      schema:             # optional, defaults to public schema

  # Data Application Deployment Framework
  # TODO: Link missing for DAD docs
  deployments:
    eventsBufferSize: 10000
    errorsBufferSize: 1000

    connect:
      statusInterval: 30 second
      actionsBufferSize: 1000

  sql:
    # processorImage: eu.gcr.io/lenses-container-registry/lenses-sql-processor
    # processorImageTag: 2.3
    mode: IN_PROC
    heap: 1024M
    minHeap: 128M
    memLimit: 1152M
    memRequest: 128M
    livenessInitialDelay: 60 seconds

  # Alert Plugins. Multiple alert plugins are supported.
  alerts:
    enabled: true
    consumersLagThreshold: 50000

    # The alert plugins to integrate with Lenses
    plugins:
      # Example
      # - class: "io.lenses.alerts.plugin.slack.SlackAlertsPlugin"
      #   config: |
      #     {
      #       webhook-url="https://your-slack-webhook-url
      #       username=Lenses™
      #       channel=lenses-slack-test
      #     }
      # - class: "io.lenses.alerts.plugin.am.AlertManagerPlugin"
      #   config: |
      #     {
      #       endpoints="http://your-alert-manager-url"
      #       source=PROD
      #       generator-url="http://lenses_prod:port1"
      #     }



  # The url to the grafana host
  grafanaUrl:

  # topics
  topics:
      # suffix to add to lenses system topics, for example if you are running more than one Lenses on the same kafka cluster
    suffix:

  security:
    defaultUser: {}
      # Change Default Lenses user credentials.
      # Username: admin / Password:admin

      # Set the username for Lenses admin
      # Use the value "external" to bypass the Helm validation and handle the username externally.
      # The common use case for using "external" is to take the actual value from a Kubernetes Secret resource already deployed.
      # To do so, add the following definition under 'lenses.additionalEnv' key:
      # - name: LENSES_SECURITY_USER
      #   valueFrom:
      #     secretKeyRef:
      #       name: [SECRET_RESOURCE_NAME]
      #       key: [SECRET_RESOURCE_KEY]
      # username: admin

      # Set the password for Lenses admin
      # Use the value "external" to bypass the Helm validation and handle the username externally.
      # The common use case for using "external" is to take the actual value from a Kubernetes Secret resource already deployed.
      # To do so, add the following definition under 'lenses.additionalEnv' key:
      # - name: LENSES_SECURITY_PASSWORD
      #   valueFrom:
      #     secretKeyRef:
      #       name: [SECRET_RESOURCE_NAME]
      #       key: [SECRET_RESOURCE_KEY]
      # password: admin

    # SPNEGO for incoming connections to Lenses
    kerberos:
      enabled: false
      principal:
      keytabData: |-

      debug: false

    # ldap setting
    ldap:
      enabled: false
      url: ""
      base: ""
      # Set LDAP password
      # Use the value "external" to bypass the Helm validation and handle the password externally.
      # The common use case for using "external" is to take the actual value from a Kubernetes Secret resource already deployed.
      # To do so, add the following definition under 'lenses.additionalEnv' key:
      # - name: LENSES_SECURITY_LDAP_PASSWORD
      #   valueFrom:
      #     secretKeyRef:
      #       name: [SECRET_RESOURCE_NAME]
      #       key: [SECRET_RESOURCE_KEY]
      password: ""
      user: ""
      filter: ""

      # ldap plugins
      plugin:
        class: "io.lenses.security.ldap.LdapMemberOfUserGroupPlugin"
        memberofKey: ""
        groupExtractRegex: ""
        personNameKey: ""

    saml:
      enabled: false
      # The HTTPS URL of the Lenses deployment.
      # This needs to match the Service Provider (SP) URL
      # given to the Identity Provider (IdP)
      # as it will be used as part of the SAML handshake protocol.
      baseUrl:

      # Provider type.
      # Supported values:
      # "azure"    - Microsoft Azure
      # "okta"     - Okta
      # "onelogin" - OneLogin
      # "keycloak" - Keycloak
      provider:

      # XML File provided by the external Identity Provider.
      # This is needed in order for Lenses SAML to understand how to communicate
      # with the Idenity Provider.
      # content of the XML file - base64 encoded
      #  openssl base64 < idp.xml | tr -d '\n'
      metadataFileData: |-

      # base64 encoded keystore data to be used for SAML crypto.
      #  openssl base64 < saml.jks | tr -d '\n'
      keyStoreFileData: |-

      # Password for accessing the keystore.
      keyStorePassword:

      # Alias to use for the private key within the keystore (only required when the keystore has multiple keys)
      keyAlias:

      # Password for accessing the private key within the keystore.
      keyPassword:

      # idp settings
      idp:
        session:
          lifetime:
            # example: 100days
            max:

      # groups settings
      groups:
        enabled: false
        plugin:
          class:

    append:
      conf: |-

  # Additional env variables appended to deployment
  # Follows the format of [EnvVar spec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/#envvar-v1-core)
  additionalEnv:
    # - name: FOO
    #   value: bar

  # Note: this will be deprecated in version 5.0
  # Uncomment to inject custom env vars if needed
  # env:
  #   CUSTOM_ENV_VAR: "foo"

  # Note: this will be deprecated in version 5.0
  # extra configurations that will be append to the lenses.conf file mounted in /mnt/settings
  ## keys must be uppercase and underscores for separators suit for use as environment variables
  ## see https://docs.lenses.io/install_setup/configuration/lenses-config.html#option-reference
  configOverrides: {}
    #LENSES_PROPERTY : value

  # Disable livenessProbe, used while debugging
  livenessProbe:
    enabled: true

  # Pause execution of Lenses start up script to allow the user to login into the container and
  # check the running environment, used while debugging
  pauseExec:
    enabled: false

sidecarContainers:
  # - name: sidecar-example
  #   image: alpine
  #   command: ["sh", "-c", "watch datetime"]
